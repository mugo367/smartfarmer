 let tableRows = document.getElementById(transactionComp.id).rows;
                let tableColumns = document.getElementById(transactionComp.id).rows[0].cells.length;


                let tbody = grid.querySelector("tbody");

                                /* let checkedInputs = document.querySelectorAll("input[type='checkbox']:checked");
                                 Array.prototype.slice.call(checkedInputs)
                                     .forEach( input => tbody.removeChild(input.parentNode.parentNode))*/

                                /*let tableRows = document.getElementById(me.id).rows;



                                let tableRef = document.getElementById(me.id);
                                //let tbody = tableRef.querySelector("tbody");

                                let checkedInputs = document.querySelectorAll("input[type='checkbox']:checked");
                                Array.prototype.slice.call(checkedInputs)
                                    .forEach( input => tbody.removeChild(input.parentNode.parentNode))

                                console.log(checkedInputs)
                               var checkedIndexes = [];
                                for (var i = 0; i < tableRows.length; i++) {
                                    let checkedInputs = document.querySelectorAll("input[type='checkbox']:checked");
                                    if (checkedInputs) {
                                        checkedIndexes.push(i);
                                    }
                                }

                                for (var k = checkedIndexes.length - 1; k >= 0; k--) {
                                    console.log(k);
                                }*/



eanUtilsBean beanUtilsBean = new BeanUtilsBean(new ConvertUtilsBean() {
        @Override
        public Object convert(String value, Class clazz) {
            if (clazz.isEnum()) {
                return Enum.valueOf(clazz, value);
            } else {
                return super.convert(value, clazz);
            }
        }
    });



                                  var queryString = "";
                                                for(var i = 0; i < checkedTransactions.length; i++) {
                                                    queryString += "myArray=" + checkedTransactions[i];

                                                    //Append an & except after the last element
                                                    if(i < checkedTransactions.length - 1) {
                                                        queryString += "&";
                                                    }


                                           }

                                           @ManyToOne(fetch = FetchType.LAZY, optional = false)
                                               @JoinColumn(name = "uid", nullable = false)
                                               @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
                                               @JsonIdentityReference(alwaysAsId = true)
                                               @JsonProperty("farmerId")
                                               @Setter(AccessLevel.NONE)
                                               private Farmer farmer;

                                               @Transient
                                               private int uid;

                                               @JsonProperty("farmerId")
                                               public void setFarmerById(Long farmerId) {
                                                   farmer = Farmer.fromId(farmerId);
                                               }


                                           @OneToMany(mappedBy = "farmer", fetch = FetchType.LAZY,
                                                       cascade = CascadeType.ALL,orphanRemoval = true)

                                               private Set<Activity> activities;

                                               public static Farmer fromId(Long farmerId) {
                                                   Farmer farmer = new Farmer();
                                                   farmer.id = farmerId;
                                                   return farmer;
                                               }